name: Translate Documentation (EN ‚Üí FR)

on:
  workflow_dispatch:
  push:
    paths:
      - "docs/**.md"

jobs:
  translate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install openai==1.47.0

      - name: Translate changed documentation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          import os, hashlib, json, pathlib, subprocess, openai

          SRC = pathlib.Path("docs")
          DEST = pathlib.Path("fr-fr")
          CACHE_FILE = pathlib.Path(".translation_cache.json")

          client = openai.OpenAI()
          cache = json.loads(CACHE_FILE.read_text()) if CACHE_FILE.exists() else {}

          # get list of changed or new .md files
          result = subprocess.run(
              ["git", "ls-files", "-m", "-o", "--exclude-standard", str(SRC)],
              capture_output=True,
              text=True,
              check=True
          )
          changed_files = [pathlib.Path(line.strip()) for line in result.stdout.splitlines() if line.strip().endswith(".md")]

          translated_count = 0
          for md in changed_files:
              rel = md.relative_to(SRC)
              out_file = DEST / rel
              out_file.parent.mkdir(parents=True, exist_ok=True)

              text = md.read_text(encoding="utf-8")
              digest = hashlib.sha1(text.encode()).hexdigest()

              if cache.get(str(rel)) == digest:
                  print(f"‚úî Skipping {rel} (unchanged)")
                  continue

              print(f"üîÅ Translating {rel}...")
              response = client.chat.completions.create(
                  model="gpt-5-turbo",
                  messages=[
                      {"role": "system", "content": "You are a professional technical translator. Translate the Markdown documentation from English to French, preserving formatting, code blocks, and metadata. Do not translate code."},
                      {"role": "user", "content": text},
                  ],
                  temperature=0.2
              )
              translated = response.choices[0].message.content
              out_file.write_text(translated, encoding="utf-8")

              cache[str(rel)] = digest
              translated_count += 1

          CACHE_FILE.write_text(json.dumps(cache, indent=2))
          print(f"‚úÖ Translation complete: {translated_count} file(s) updated")

      - name: Commit translations
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add fr-fr/ .translation_cache.json
          git diff --cached --quiet || git commit -m "chore: update French translations"
          git push
